splineTerms <- sapply(knots, function(knot) (x>knot)*(x-knot))
xmat <- cbind(1, x, splineTerms)
smat
xmat
fit <- lm(y ~ xmat-1)
summary(fit)$coef
yhat <- predict(fit)
yhat
yhat[11]-yhat[10]
yhat[10]-yhat[9]
x
x[1]
y1 <- y[6:11]
y1
x1 <- x[6:11]
fit <- lm(y1 ~ x1)
summary(fit)$coef
plot(x1, y1)
data("InsectSprays")
View(InsectSprays)
fit <- glm(count ~ factor(spray), data=InsectSprays, family=poisson())
fit <- glm(count ~ factor(spray)-1, data=InsectSprays, family=poisson())
summary(fit)$coef
exp(fit$coefficients[1])/exp(fit$coefficients[2])
t <- 0
t <- log(0+1)
t
fit <- glm(count ~ factor(spray)-1, data=InsectSprays, family=poisson(), offset(t))
t <- InsectSprays$count
t
fit <- glm(count ~ factor(spray)-1, data=InsectSprays, family=poisson(), offset=log(t+1))
summary(fit)$coef
fit1 <- glm(count ~ factor(spray)-1, data=InsectSprays, family=poisson(), offset=log(10)+t)
summary(fit1)$coef
fit1 <- glm(count ~ factor(spray)-1, data=InsectSprays, family=poisson(), offset=log(10)+log(t+1))
summary(fit1)$coef
data("InsectSprays")
fit <- glm(count ~ factor(spray)-1, data=InsectSprays, offset(log(count+1)))
t <- InsectSprays$count
fit <- glm(count ~ factor(spray)+offset(log(t+1)), data=InsectSprays)
fit1 <- glm(count ~factor(spray)+offset(log(10)+log(t+1)),data=InsectoSprays)
fit1 <- glm(count ~factor(spray)+offset(log(10)+log(t+1)),data=InsectSprays)
summary(fit)$coef
summary(fit1)$coef
libarary(AppliedPredictiveModeling)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
head(AlzheimerDisease)
data(AlzheimerDisease)
head(predictors)
colnames(predictors)
adData = data.frame(diagnosis, predictors)
View(adData)
trainIndex <- createDataPartition(diagnosis, p=0.50, list=FALSE)
library(caret)
trainIndex <- createDataPartition(diagnosis, p=0.50, list=FALSE)
trainIndex1 <- createDataPartition(diagnosis, p=0.50)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain= createDataPartition(mixtures$CompressiveStrength, p=3/4)[[1]]
training = mixtures[inTrain,]
testing = mixtures[-inTrain,]
View(mixtures)
plot(Index,$mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength)
summary(concrete)
featurePlot( , ., mixtures$CompressiveStrength, plot=pairs)
featurePlot( , c("BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer"), mixtures$CompressiveStrength, plot=pairs)
featurePlot(x=training[,c("BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer")],y=mixtures$CompressiveStrength, plot=pairs)
featurePlot(x=training[,c("BlastFurnaceSlag", "FlyAsh", "Water", "Superplasticizer")],y=mixtures$CompressiveStrength, plot="pairs")
featurePlot(x=training,y=mixtures$CompressiveStrength, plot="pairs")
plot(CompressiveStrength, Cement, data="training")
View(training)
plot(CompressiveStrength, Cement, data=training)
plot(training$CompressiveStrength, training$Cement)
plot(training$CompressiveStrength, training$BlastFurnaceSlag)
plot(training$CompressiveStrength, training$FlyAsh)
plot(training$CompressiveStrength, training$Superplasticizer)
plot(training$CompressiveStrength, training$CoarseAggregate)
plot(training$CompressiveStrength, training$FineAggregate)
plot(training$CompressiveStrength, training$Age)
plot(training$CompressiveStrength)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzhemierDisease)
data(AlzheimerDisease)
adData = dataframe(diagnosis, predictors)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
grep("IL", training)
grep("IL", colnames(training))
colnames(training)
grep("IL", colnames(training))
grep("^IL", colnames(training))
training1 <- subset(training, grep("^IL", colnames(training)))
?subset
training1 <- subset(training, grepl("^IL", colnames(training)))
View(training1)
training1 <- subset(training, grep("^IL", colnames(training)))
library(dplyr)
training1 <- select(training, grep("^IL", colnames(training)))
View(training)
training2 <- data.frame(diagnosis, training1)
training1 <- select(training, diagnosis, grep("^IL", colnames(training)))
View(training1)
preProc <- preProcess(training1[, IL_str], method = "pca", thresh = 0.8)
preProc <- preProcess(training1, method = "pca", thresh = 0.8)
preProc
M <- abs(cor(training1))
M <- abs(cor(training1[,-1]))
diag(M) <- 0
which(M > 0.8 arr.ind=T)
which(M > 0.8, arr.ind=T)
which(M > 0.5, arr.ind=T)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
training1 <- select(training, diagnosis, grep("^IL", colnames(training)))
View(training1)
modelFit <- train(diagnosis ~ ., method = "glm", data = training1)
moedlFit <- train(training1$diagnosis ~ ., method="glm", data=training1)
moedlFit <- train(training1$diagnosis ~ ., method="glm")
modelFit <- train(training1$diagnosis ~ ., method="glm", data=training1)
install.packages("e1071")
modelFit <- train(training1$diagnosis ~ ., method="glm", data=training1)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
preProc <- preProcess(training1, method="pca")
modelfit1 <- train(training1$diagnosis ~ ., method="glm", data=training1)
prediction1 <- predict(modelfit1, newdata=testing)
confusionMatric(prediction1, testing$diagnosis)
confusionMatrix(prediction1, testing$diagnosis)
trainPC <- predict(preProc, training1)
modelfit1 <- train(training1$diagnosis ~ ., method="glm", data=trainPC)
testPC <- predict(preProc, testing)
confusionMatrix(testing$diagnosis, modelfit1)
modelFit <- train(training$diagnosis ~ ., method = "glm", preProcess = "pca",data = training, trControl = trainControl(preProcOptions = list(thresh = 0.8)))
confusionMatrix(testing$diagnosis, predict(modelFit, testing))
preProc <- preProcess(training1, method = "pca", thresh = 0.8)
test <- predict(preProc, training1)
test
modelFit <- train(training1$diagnosis~., method="glm", data=test)
testPC <- predict(preProc, testing)
confusionMatrix(testing$diagnosis predict(modelFit, testPC))
confusionMatrix(testing$diagnosis, predict(modelFit, testPC))
preProc <- preProcess(training1, method="pca", thres=0.8)
preProc
preProc <- preProcess(training1, method="pca", thres=0.9)
preProc
preProc <- preProcess(training1, method="pca", thres=0.75)
preProc
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
inTrain <- createDataPartition(y=span$type, p=0.75, list=FALSE)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
training <- spam[inTrain,]
testing <- spam[-inTrain,]
dim(training)
View(training)
set.seed(32343)
modelFit <- train(type~., data=training, method="glm")
modelFit
modelFit$finalModel
predictions <- predict(modelFit, newdata=testing)
predictions
confusionMatrix(predictions, testing$type)
head(spam$type)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
trainIndex <- createDataPartition(diagnosis, p=0.75, list=FALSE)
training <- adData[trainIndex,]
testing <- adData[-trainIndex,]
dim(training)
dim(testing)
set.seed(32343)
modelFit <- train(diagnosis ~ ., data=training, method="glm")
modelFit
prediction <- predict(ModelFit, newdata=testing)
prediction <- predict(modelFit, newdata=testing)
prediction
confusionMatrix(prediction, testing$diagnosis)
library(ISLR)
install.packages("ISLR")
install.packages("ISLR")
library(ggplot2)
data("Wage")
library(ISLR)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain,]
testing <- Wage[-inTrain,]
dim(training)
dim(testing)
featurePlot(x=training[,c("age", "education", "jobclass")], y=training$wage, plot="pairs")
featurePlot(x=training, y=training$wage, plot="pairs")
featurePlot(x=training[,c("age", "education", "jobclass")], y=training$wage, plot="pairs")
qplot(age, wage, data=training)
qplot(age, wage, color=jobclass, data=training)
qq <- qplot(age, wage, color=education, data=training)
qq + geom_smooth(method='lm', formula=y~x)
library(Hmisc)
cutWate <- cut2(training$wage, g=3)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
pl <- gplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
pl <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
pl
p2 <- qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot", "jitter"))
grid.arrange(p1, p2, ncol=2)
library(caret)
library(dplyr)
library(AppliedPredictiveModelling)
library(AppliedPredictiveModeling)
set.seed(3422)
data(AlzheimerDisease)
adData <- data.frame(diagnosis, predictors)
adData1 <- select(adData, Diagnosis, grep("^IL", colnames(adData)))
adData1 <- select(adData, diagnosis, grep("^IL", colnames(adData)))
inTrain <- createDataPartition(adData1$diagnosis, p=0.75, list=FALSE)
training <-adData1[inTrain,]
testing <- adData1[-inTrain,]
pre <- preProcess(training[-diagnosis], method="pca")
pre <- preProcess(training, method="pca")
pre
pre <- preProcess(training, method="pca", thresh=0.8)
pre
trainPC <- predict(pre, training)
trainPC
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainPC)
trainPC <- predict(pre, testing)
confusionMatrix(testing$diagnosis, trainPC)
confusionMatrix(testing$diagnosis, predict(modelFit, trainPC))
data("iris")
library(ggplot2)
table(iris$Species)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training)
dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
library(rattle)
predict(modFit, newdata=testing)
testing
library(AppliedPredictiveModeling)
library(caret)
library(pgmm)
install.packages("pgmm")
install.packages("rpart")
install.packages("ElemStatLearn")
data(segmentationOriginal)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
library(caret
)
inTrain <- createDataPartition(y=segmentationOriginal$Case, p=0.7, list=FALSE)
training <- segmentationOriginal[inTrain,]
testing <- segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.7)
View(segmentationOriginal)
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
test(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.7)
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.7)
library(rattle)
install.packages("rattle")
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(caret)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
newdata <- as.data.frame(t(colMeans(olive)))
ModOlive <- train(Area ~ ., method="rpart", data=Olive)
ModOlive <- train(Area ~ ., method="rpart", data=olive)
predict(ModOlive, newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train <- sample(!:dim(Saheart)[1], size-dim(SAheart[1]/2, replace=F))
train <- sample(1:dim(SAheart)[1], size-dim(SAheart[1]/2, replace=F))
train <- sample(1:dim(SAheart)[1], size=dim(SAheart[1]/2, replace=F))
train <- sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F))
train <- sample(1:dim(SAheart)[1], size=dim(SAheart)[1]/2, replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
set.seed(13234)
View(trainSA)
modFit <- train(chd ~ c(age, alcohol, obesity, typea, ldl, tobacco), method="glm", data=trainSA)
trainSA1 <- select(trainSA, -sbp, - famhist, -adiposity)
library(dplyr)
trainSA1 <- select(trainSA, -sbp, - famhist, -adiposity)
modFit <- train(chd ~ ., method="glm", data=trainSA1)
modFit <- train(chd ~ ., method="glm", family="binomial", data=trainSA1)
modFit <- train(chd ~ age+alcohol+obesity+typea+tobacco+ldl, data=trainSA, method="glm", family="binomial")
missClass = function(values, prediction){sum(((prediction > 0.5) * 1) != values) / length(values)}
missClass(testSA$chd, predict(modelSA, newdata = testSA))
missClass(testSA$chd, predict(modFit, newdata = testSA))
missClass(trainSA$chd, predict(modFit, newdata = trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
data(vowel.train)
vowel.train$y <- as.factor(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modVowel <- train(y ~ ., method="rf", data=vowel.train)
modVowel <- train(y ~ ., method="rf", data=vowel.train)
?varImp
varImp(modVowel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
as.factor(vowel.train$y)
str(vowle.train)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modFit <- train(y ~ ., data=vowel.train, method="rf")
library(caret)
modFit <- train(y ~ ., data=vowel.train, method="rf")
modFit$finalModel
temp <- predict(modFit, newdata=vowel.test)
temp
temp$final
modFit$confusion
modFit$confusionMatrix
confusionMatrix(temp, temp)
modFit <- train(y ~ ., data=vowel.train, method="gbm")
modFit <- train(y ~ ., data=vowel.train, method="gbm")
temp1 <- predict(modFit, newdata=vowel.test)
temp1
temp1$final
rfa <- sum(temp == vowel.test$y) / length(temp)
rfa
gba <- sum(temp1 == vowel.test$y) / length(temp1)
gba
agreeSub = vowel.test[rfa == gba]
trMod <- train(y ~ ., data=vowel.train, model="rf")
trMod
rfpredict <- predict(trMod, newdata=vowel.test)
repredict
rfpredict
rfpredict$finalmodel
temp <- confusionMatrix(vowel.test$y, rfpredict)
temp
trMod <- train(y ~ ., data=vowel.train, model="gbm")
gbmpredict <- predict(trMod, newdata=vowel.test)
temp <- confusionMatrix(vowel.test$y, gbmpredict)
temp
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.train)
library(caret)
rf_mod <- train(y ~ ., data=vowel.train, model="rf")
gbm_mod <- train(y ~ ., data=vowel.train, model="gbm")
predrf <- predict(rf_mod, vowel.test)
predgbm <- predict(gbm_mod, vowel.test)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(predgbm, vowel.test$y)
predDF <- data.frame(predrf, predgbm, y=vowel.test$y)
combModFit <- train(y ~ ., data=predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(combPred, predDF$y)
set.seed(33833)
rf_mod <- train(y ~ ., data=vowel.train, model="rf")
gbm_mod <- train(y ~ ., data=vowel.train, model="gbm")
predrf <- predict(rf_mod, vowel.test)
predgbm <- predict(gbm_mod, vowel.test)
confusionMatrix(predrf, vowel.test$y)
confusionMatrix(predgbm, vowel.test$y)
predDF <- data.frame(predrf, predgbm, y=vowel.test$y)
combModFit <- train(y ~ ., data=predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(predgbm, vowel.test$y)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis.predictors)
View(AlzheimerDisease)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis$predictors)
adData <- data.frame(diagnosis, predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
mod_rf <- train(diagnosis ~ ., data=training, model="rf")
mod_gbm <- train(diagnosis ~ ., data=training, model="gbm")
mod_lda <- train(diagnosis ~ ., data=training, model="lda")
set.seed(62433)
mod_rf <- train(diagnosis ~ ., data=training, model="rf")
mod_gbm <- train(diagnosis ~ ., data=training, model="gbm")
mod_lda <- train(diagnosis ~ ., data=training, model="lda")
pred_rf <- predict(mod_rf, testing)
pred_gbm <- predict(mod_gmb, testing)
pred_gbm <- predict(mod_gbm, testing)
pred_lda <- predict(mod_lda, testing)
predDF <- data.frame(pred_rf, pred_gbm, pred_lda, diagnosis=testing$diagnosis)
combModFit <- train(diagnosis ~ ., method = "rf", data = predDF)
combPred <- predict(combModFit, predDF)
confusionMatrix(pred_rf, testing$diagnosis)$overall[1]
confusionMatrix(pred_gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred_lda, testing$diagnosis)$overall[1]
confusionMatrix(combPred, testing$diagnosis)$overall[1]
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain <- createDataPartition(concrete$CompressionStrength, p=3/4)[[1]]
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain,]
set.seed(233)
modFit <- train(CompressiveStrength ~ ., data=training, method="lasso")
modFit <- train(CompressiveStrength ~ ., data=training, method="lasso")
conc.fit.lasso$finalModel$beta.pure
modFit$finalModel$beta.pure
dat = read.csv("https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
library(lubridate)
training <- dat[year(dat$data) < 2012,]
training <- dat[year(dat$date) < 2012,]
testing <- dat[(year(dat$date))>2011,]
tstrain <- ts(training$visitsTumblr)
library(forecast)
install.packages("forecast")
library(forecast)
fit <- bats(tstrain)
fc <- forcast(fit)
fc <- forecast(fit)
plot(fc)
fc <- forecast(fit, nrow(testing))
plot(fc)
lower <- fc$lower[,2]
upper <- fc$upper[,2]
lower
nrow(lower)
?nrow
nrownrow(lower)
nrow(lower)
length(lower)
length(upper)
length(test$visitsTumblr)
length(testing$visitsTumblr)
lower < testing$visitsTumblr
z <- lower < testing$visitsTumblr
length(z[z==TRUE])
zz <- upper>testing$visitsTumblr
length(zz[zz==TRUE])
226/235
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain <- createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain,]
set.seed(325)
library(e1071)
fit <- svm(CompressiveStrength ~ ., data=training)
pred <- predict(fit, newdata=testing)
error = pred - testing$CompressiveStrength
sqrt(mean(error^2))
library(manipulate)
manipulate(plot(1:x), x=slider(1,100))
manipulate(plot(1:x), x=slider(1,100))
setwd("C:/Users/Mark/DataProductsProject")
